buildscript {
    ext {
        springBootVersion = '1.5.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.scotia.plato.training'
version = '0.0.1-SNAPSHOT'
description = 'pcf demo'



sourceCompatibility = 1.8
targetCompatibility = 1.8



repositories {
    mavenCentral()
    maven {
        url "https://repo.spring.io/plugins-release"
    }
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-actuator')

    compile('org.springframework.cloud:spring-cloud-spring-service-connector')
    compile('org.springframework.cloud:spring-cloud-cloudfoundry-connector')

    compile("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry")
    compile("io.pivotal.spring.cloud:spring-cloud-services-starter-config-client")
    compile("io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker")


    compile("org.springframework.cloud:spring-cloud-starter-feign")

    testCompile('org.springframework.boot:spring-boot-starter-test')
}


ext {
    springCloudVersion = 'Edgware.RELEASE'
    springCloudServicesVersion = '1.6.0.RELEASE'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"

    }
}




/*

jar {
    manifest {
        attributes 'Implementation-Title': project.description,
                'Implementation-Version': project.version,
                'Main-Class': 'com.scotia.plato.training.customerapi.CustomerApiApplication'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
*/

